
// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è - –ó–ê–ú–ï–ù–ò–¢–ï –ù–ê –†–ï–ê–õ–¨–ù–´–ï –ê–î–†–ï–°–ê
const CONFIG = {
    API_BASE_URL: 'https://api.your-real-company.com',
    API_1C_BASE_URL: 'https://your-real-1c-server.com/hs'
};

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let tg = null;
let userData = null;
let currentTaskId = null;
let isOnline = true;

// –î–µ–º–æ-–¥–∞–Ω–Ω—ã–µ (–º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –∑–∞–≥—Ä—É–∑–∫—É –∏–∑ API)
const tasksData = [
  {
    type: "event",
    id: "EV-001",
    title: "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ö–ö–¢",
    status: "in-progress"
  },
  {
    type: "task",
    id: "T-201",
    title: "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ö–ö–¢",
    status: "in-progress",
    parentId: "EV-001"
  },
  {
    type: "service",
    id: "S-101",
    title: "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ –ö–ö–¢",
    status: "new",
    parentId: "EV-001"
  },
  {
    type: "event",
    id: "EV-002",
    title: "–û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ –ì–°–ú –≤—ã–ø–æ–ª–Ω–µ–Ω–æ",
    status: "completed"
  },
  {
    type: "task",
    id: "T-202",
    title: "–°–≤–µ—Ä–∫–∞ –ì–°–ú —Å –ê–ó–°",
    status: "completed",
    parentId: "EV-002"
  },
  {
    type: "service",
    id: "S-102",
    title: "–ü–ª–∞–Ω–æ–≤–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ –ì–°–ú",
    status: "new",
    parentId: "EV-002"
  },
  {
    type: "event",
    id: "EV-003",
    title: "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã",
    status: "postponed"
  },
  {
    type: "task",
    id: "T-203",
    title: "–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –î–û",
    status: "postponed",
    parentId: "EV-003"
  },
  {
    type: "service",
    id: "S-103",
    title: "–ê–≤–∞—Ä–∏–π–Ω–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ",
    status: "new",
    parentId: "EV-003"
  },
  {
    type: "event",
    id: "EV-004",
    title: "–ü—Ä–æ–≤–µ–¥–µ–Ω–∏–µ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏–∏",
    status: "new"
  },
  {
    type: "task",
    id: "T-204",
    title: "–ü–æ–¥—Å—á–µ—Ç —Ç–æ–≤–∞—Ä–Ω—ã—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤",
    status: "new",
    parentId: "EV-004"
  },
  {
    type: "service",
    id: "S-104",
    title: "–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è",
    status: "new",
    parentId: "EV-004"
  }
];

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
document.addEventListener('DOMContentLoaded', function() {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Web App
    if (typeof Telegram !== 'undefined' && Telegram.WebApp) {
        tg = Telegram.WebApp;
        tg.expand();
        tg.enableClosingConfirmation();
        autoAuth();
        setupTheme();
    } else {
        console.warn('Telegram Web App –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω. –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ –±—Ä–∞—É–∑–µ—Ä–∞.');
        tg = {
            initData: 'query_id=test&user=%7B%22id%22%3A12345%7D',
            colorScheme: 'light',
            setHeaderColor: () => {},
            expand: () => {},
            enableClosingConfirmation: () => {},
            showPopup: null
        };
        simulateTelegramAuth();
    }

    checkConnection();
    setupEventListeners();
    initializeFilters();

    // üëá –†–µ–Ω–¥–µ—Ä–∏–º –∑–∞–¥–∞—á–∏ –ø–æ –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ
    renderTasksByEvents();
});

// üëá –§—É–Ω–∫—Ü–∏—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ –ø–æ —Å–æ–±—ã—Ç–∏—è–º
function renderTasksByEvents() {
    const eventsContainer = document.querySelector('.events-container');
    if (!eventsContainer) return;

    // –û—á–∏—â–∞–µ–º
    eventsContainer.innerHTML = '';

    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Å–æ–±—ã—Ç–∏—è–º
    const eventMap = {};
    tasksData.forEach(item => {
        if (item.type === "event") {
            eventMap[item.id] = { ...item, children: [] };
        } else {
            if (eventMap[item.parentId]) {
                eventMap[item.parentId].children.push(item);
            }
        }
    });

    // –†–µ–Ω–¥–µ—Ä–∏–º
    Object.values(eventMap).forEach(event => {
        const group = document.createElement("div");
        group.className = "event-group";

        const header = document.createElement("div");
        header.className = "event-header";
        header.innerHTML = `
            <span class="event-icon">üìÅ</span>
            <span class="event-title">${event.title}</span>
            <span class="event-status status-${event.status}">${getStatusText(event.status)}</span>
        `;
        group.appendChild(header);

        event.children.forEach(child => {
            const item = document.createElement("div");
            item.className = child.type === "task" ? "task-item" : "service-item";
            item.dataset.status = child.status;
            item.dataset.id = child.id;
            item.onclick = () => openTaskDetail(child.id);

            let icon = child.type === "task" ? "‚úÖ" : "‚öôÔ∏è";
            let idPrefix = child.type === "task" ? "–ó–∞–¥–∞—á–∞#" : "–û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ#";
            let statusClass = `status-${child.status}`;

            item.innerHTML = `
                <span class="task-icon">${icon}</span>
                <span class="task-id">${idPrefix}${child.id}</span>
                <span class="task-title">${child.title}</span>
                <span class="task-status ${statusClass}">${getStatusText(child.status)}</span>
            `;
            group.appendChild(item);
        });

        eventsContainer.appendChild(group);
    });
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å—Ç–∞—Ç—É—Å–∞
function getStatusText(status) {
    switch (status) {
        case "in-progress": return "–≤ —Ä–∞–±–æ—Ç–µ";
        case "completed": return "–≤—ã–ø–æ–ª–Ω–µ–Ω–æ";
        case "postponed": return "–æ—Ç–ª–æ–∂–µ–Ω–æ";
        case "new": return "–Ω–æ–≤–æ–µ";
        default: return "";
    }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
function checkConnection() {
    isOnline = navigator.onLine;
    updateConnectionStatus();
    
    window.addEventListener('online', () => {
        isOnline = true;
        updateConnectionStatus();
        showSuccess('–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    });
    
    window.addEventListener('offline', () => {
        isOnline = false;
        updateConnectionStatus();
        showError('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ');
    });
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
function updateConnectionStatus() {
    const statusElement = document.querySelector('.connection-status');
    if (statusElement) {
        statusElement.textContent = `–ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ 1–°–ü—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–µ (–∫–≤.3.20) ${isOnline ? '' : ' [–û–§–§–õ–ê–ô–ù]'}`;
        statusElement.style.color = isOnline ? '#666' : '#ff6b6b';
    }
}

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
async function autoAuth() {
    try {
        const token = getTokenFromURL();
        if (token) {
            const response = await fetch(`${CONFIG.API_BASE_URL}/auth/validate`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${token}`
                }
            });
            if (response.ok) {
                const data = await response.json();
                userData = { guid: data.user_guid, role: data.role };
                console.log('–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞:', userData);
            } else {
                throw new Error('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
            }
        } else {
            simulateTelegramAuth();
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error);
        simulateTelegramAuth();
        showError('–†–µ–∂–∏–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ');
    }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∏–∑ URL
function getTokenFromURL() {
    const urlParams = new URLSearchParams(window.location.search);
    return urlParams.get('token');
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–º—ã
function setupTheme() {
    const theme = localStorage.getItem('theme') || 'auto';
    if (theme === 'auto' && tg) {
        applyTheme(tg.colorScheme);
        tg.onEvent('themeChanged', () => applyTheme(tg.colorScheme));
    } else {
        applyTheme(theme);
    }
}

// –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–º—ã
function applyTheme(theme) {
    if (theme === 'dark' || (theme === 'auto' && tg && tg.colorScheme === 'dark')) {
        document.documentElement.setAttribute('data-theme', 'dark');
        if (tg) tg.setHeaderColor('#1e1e1e');
    } else {
        document.documentElement.setAttribute('data-theme', 'light');
        if (tg) tg.setHeaderColor('#2481cc');
    }
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
function setupEventListeners() {
    document.querySelectorAll('.tab').forEach(tab => {
        tab.addEventListener('click', function() {
            switchTab(this.dataset.tab);
        });
    });

    document.getElementById('status-filter').addEventListener('change', filterTasks);
    document.getElementById('date-filter').addEventListener('change', filterTasks);

    document.addEventListener('click', function(e) {
        if (e.target.classList.contains('download-btn')) {
            const documentId = e.target.getAttribute('data-document-id');
            if (documentId) downloadDocument(documentId);
        }
    });
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
function initializeFilters() {
    filterTasks();
}

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫
function switchTab(tabName) {
    document.querySelectorAll('.tab').forEach(tab => tab.classList.remove('active'));
    document.querySelector(`.tab[data-tab="${tabName}"]`).classList.add('active');
    document.querySelectorAll('.tab-content').forEach(content => content.classList.remove('active'));
    document.getElementById(`${tabName}-tab`).classList.add('active');
}

// –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∑–∞–¥–∞—á (–æ–±–Ω–æ–≤–ª—ë–Ω–Ω–∞—è –ø–æ–¥ –Ω–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É)
function filterTasks() {
    const statusFilter = document.getElementById('status-filter').value;
    const dateFilter = document.getElementById('date-filter').value; // –ø–æ–∫–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è

    document.querySelectorAll('.task-item, .service-item').forEach(item => {
        const itemStatus = item.dataset.status;
        if (statusFilter === 'all' || itemStatus === statusFilter) {
            item.style.display = 'flex';
        } else {
            item.style.display = 'none';
        }
    });
}

// –û—Ç–∫—Ä—ã—Ç–∏–µ –¥–µ—Ç–∞–ª–µ–π –∑–∞–¥–∞—á–∏
function openTaskDetail(taskId) {
    currentTaskId = taskId;
    document.getElementById('detail-task-id')?.textContent && (document.getElementById('detail-task-id').textContent = taskId);
    document.getElementById('detail-confirm-id')?.textContent && (document.getElementById('detail-confirm-id').textContent = `#${taskId}`);
    showScreen('task-detail-screen');
}

// –ü–æ–∫–∞–∑ —ç–∫—Ä–∞–Ω–∞
function showScreen(screenId) {
    document.querySelectorAll('.screen').forEach(screen => screen.classList.remove('active'));
    document.getElementById(screenId)?.classList.add('active');
}

// –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
async function confirmTask() {
    if (!isOnline) {
        showError('–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É. –î–µ–π—Å—Ç–≤–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.');
        return;
    }

    const confirmationType = document.querySelector('input[name="confirmation"]:checked');
    const comment = document.querySelector('.comment-input')?.value;

    if (!confirmationType) {
        showError('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è');
        return;
    }

    try {
        await simulateApiRequest();
        showSuccess('–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞');
        showScreen('main-screen');
        updateTaskStatus(currentTaskId, confirmationType.value);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–¥–∞—á–∏:', error);
        showError('–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–¥–∞—á–∏');
    }
}

// –ò–º–∏—Ç–∞—Ü–∏—è API –∑–∞–ø—Ä–æ—Å–∞
function simulateApiRequest() {
    return new Promise(resolve => setTimeout(() => resolve({ Status: 'Success' }), 1000));
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏ (–æ–±–Ω–æ–≤–ª—ë–Ω–Ω–∞—è –ø–æ–¥ –Ω–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É)
function updateTaskStatus(taskId, status) {
    const taskItem = document.querySelector(`[data-id="${taskId}"]`);
    if (taskItem) {
        const statusElement = taskItem.querySelector('.task-status');
        statusElement.classList.remove('status-in-progress', 'status-completed', 'status-postponed', 'status-new');

        let newStatusClass = '';
        let newStatusText = '';

        switch (status) {
            case 'completed':
                newStatusClass = 'status-completed';
                newStatusText = '–≤—ã–ø–æ–ª–Ω–µ–Ω–æ';
                break;
            case 'partial':
                newStatusClass = 'status-in-progress';
                newStatusText = '—á–∞—Å—Ç–∏—á–Ω–æ';
                break;
            case 'postponed':
                newStatusClass = 'status-postponed';
                newStatusText = '–æ—Ç–ª–æ–∂–µ–Ω–æ';
                break;
            default:
                newStatusClass = 'status-new';
                newStatusText = '–Ω–æ–≤–æ–µ';
        }

        statusElement.classList.add(newStatusClass);
        statusElement.textContent = newStatusText;
        taskItem.dataset.status = status === 'completed' ? 'completed' : status === 'partial' ? 'in-progress' : status === 'postponed' ? 'postponed' : 'new';
    }
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è PDF
async function generateTaskPDF() {
    if (!isOnline) {
        showError('–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É. –î–µ–π—Å—Ç–≤–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.');
        return;
    }

    try {
        await generateDemoPDF(currentTaskId);
        showSuccess('PDF —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∏ —Å–∫–∞—á–∞–Ω');
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF:', error);
        showError('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF');
    }
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–µ–º–æ-PDF
function generateDemoPDF(taskId) {
    return new Promise(resolve => {
        const content = `–ó–∞–¥–∞—á–∞: ${taskId}\n–î–∞—Ç–∞: ${new Date().toLocaleDateString()}\n–°—Ç–∞—Ç—É—Å: –í —Ä–∞–±–æ—Ç–µ`;
        const blob = new Blob([content], { type: 'application/pdf' });
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = `task_${taskId}.pdf`;
        a.click();
        URL.revokeObjectURL(url);
        resolve();
    });
}

// –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞
async function downloadDocument(documentId) {
    if (!isOnline) {
        showError('–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É. –î–µ–π—Å—Ç–≤–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.');
        return;
    }

    try {
        await generateDemoDocument(documentId);
        showSuccess('–î–æ–∫—É–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω');
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞:', error);
        showError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É.');
    }
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–µ–º–æ-–¥–æ–∫—É–º–µ–Ω—Ç–∞
function generateDemoDocument(documentId) {
    return new Promise(resolve => {
        const documentNames = {
            'report_dec_2023': '–û—Ç—á–µ—Ç –∑–∞ –¥–µ–∫–∞–±—Ä—å 2023.pdf',
            'contract_supplier': '–î–æ–≥–æ–≤–æ—Ä —Å –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–º.pdf',
            'financial_plan_q1': '–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ø–ª–∞–Ω Q1 2024.pdf',
            'invoice_12345': '–°—á–µ—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É ‚Ññ12345.pdf',
            'act_completed': '–ê–∫—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç.pdf'
        };

        const content = `–î–æ–∫—É–º–µ–Ω—Ç: ${documentNames[documentId] || documentId}\n–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: ${new Date().toLocaleDateString()}`;
        const blob = new Blob([content], { type: 'application/pdf' });
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = documentNames[documentId] || `document_${documentId}.pdf`;
        a.click();
        URL.revokeObjectURL(url);
        resolve();
    });
}

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å–µ–∫—Ü–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
function toggleCommentSection() {
    const commentSection = document.querySelector('.comment-section');
    if (commentSection) commentSection.classList.toggle('hidden');
}

// –ü–æ–∫–∞–∑ –æ—à–∏–±–∫–∏
function showError(message) {
    console.error('–û—à–∏–±–∫–∞:', message);
    const notification = document.createElement('div');
    notification.className = 'custom-notification error';
    notification.innerHTML = `
        <div class="notification-content">
            <span class="notification-icon">‚ö†Ô∏è</span>
            <span class="notification-text">${message}</span>
        </div>
    `;
    document.body.appendChild(notification);
    setTimeout(() => notification.classList.add('show'), 10);
    setTimeout(() => {
        notification.classList.remove('show');
        setTimeout(() => notification.parentNode && notification.parentNode.removeChild(notification), 300);
    }, 5000);
}

// –ü–æ–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
function showSuccess(message) {
    console.log('–£—Å–ø–µ—Ö:', message);
    const notification = document.createElement('div');
    notification.className = 'custom-notification success';
    notification.innerHTML = `
        <div class="notification-content">
            <span class="notification-icon">‚úÖ</span>
            <span class="notification-text">${message}</span>
        </div>
    `;
    document.body.appendChild(notification);
    setTimeout(() => notification.classList.add('show'), 10);
    setTimeout(() => {
        notification.classList.remove('show');
        setTimeout(() => notification.parentNode && notification.parentNode.removeChild(notification), 300);
    }, 3000);
}

// –≠–º—É–ª—è—Ü–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
function simulateTelegramAuth() {
    userData = { guid: 'test-guid-12345', role: 'user' };
    console.log('–¢–µ—Å—Ç–æ–≤–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞:', userData);
}